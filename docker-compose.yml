services:
  back-end:
    container_name: caderneta-backend
    restart: always
    environment:
      PORT: ${PORT}
      NODE_ENV: ${NODE_ENV}
      DATABASE_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      DATABASE_DEFAULT_SCHEMA: ${MYSQL_DATABASE}
      DATABASE_USER: ${MYSQL_USER}
      DATABASE_PASSWORD: ${MYSQL_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      SSL_KEY_PATH: /etc/ssl/privkey.pem
      SSL_CERT_PATH: /etc/ssl/cert.pem
    build:
      context: ./BackEnd-Caderneta
      dockerfile: Dockerfile
    volumes:
      - ./.certs/:/etc/ssl/:ro
    networks:
      - caderneta-network
    ports:
      - "8080:8080"
    logging:
      driver: json-file
      options:
        max-size: 100m


  front-end:
    container_name: caderneta-frontend
    restart: always
    environment:
      REACT_APP_API_GATEWAY: ${REACT_APP_API_GATEWAY}
      SSL_KEY_PATH: /etc/ssl/privkey.pem
      SSL_CERT_PATH: /etc/ssl/cert.pem
    build:
      context: ./FrontEnd-Caderneta
      dockerfile: Dockerfile
    networks:
      - caderneta-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.certs/:/etc/ssl/:ro
    logging:
      driver: json-file
      options:
        max-size: 100m

  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    networks:
      - caderneta-network

volumes:
  caderneta-mysql-data:
    name: caderneta-mysql

networks:
  caderneta-network:
    name: caderneta-network
    driver: bridge
